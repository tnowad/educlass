# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActionResult {
  message: String
  success: Boolean!
}

type Assignment {
  attachements: [File!]!
  course: Course!
  createdAt: DateTime!
  description: String!
  dueDate: DateTime
  id: String!
  startDate: DateTime
  title: String!
  updatedAt: DateTime!
}

type Course {
  assignments: [Assignment!]
  code: String!
  createdAt: DateTime!
  id: String!
  inviteLink: String!
  name: String!
  posts: [Post!]
  room: String
  section: String
  subject: String
  updatedAt: DateTime!
}

type CourseParticipant {
  courseId: String!
  id: String!
  joinedAt: DateTime!
  role: CourseRole!
  userId: String!
}

enum CourseRole {
  CO_OWNER
  OWNER
  PARTICIPANT
}

input CourseWhereInput {
  name: String
  userId: String
}

type CoursesConnection {
  edges: [CoursesEdge!]!
  pageInfo: PageInfo!
}

type CoursesEdge {
  cursor: String!
  node: Course!
}

input CreateAssignmentInput {
  attachements: [Upload!]
  courseId: String!
  description: String!
  dueDate: DateTime!
  startDate: DateTime!
  title: String!
}

input CreateCourseInput {
  name: String!
  room: String
  section: String
  subject: String
}

input CreateCourseParticipantInput {
  courseId: String!
  role: CourseRole! = PARTICIPANT
}

input CreateLocalProviderInput {
  password: String!
}

input CreatePostInput {
  audience: audience_enum
  authorId: String!
  content: String!
  courseId: String!
  status: post_status_enum
}

input CreateUserInput {
  email: String!
  emailVerified: Boolean
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  assignment: Assignment
  createdAt: DateTime!
  filename: String!
  id: String!
  mimetype: String
  objectName: String!
  updatedAt: DateTime!
  url: String
  user: User
}

type LocalProvider {
  createdAt: DateTime!
  id: String!
  password: String!
  updatedAt: DateTime!
  user: User!
}

type Mutation {
  createAssignment(createAssignmentInput: CreateAssignmentInput!): Assignment!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  createCourseParticipant(createCourseParticipantInput: CreateCourseParticipantInput!): CourseParticipant!
  createLocalProvider(createLocalProviderInput: CreateLocalProviderInput!): LocalProvider!
  createPost(createPostInput: CreatePostInput!): Post!
  createUser(createUserInput: CreateUserInput!): User!
  deletePost(id: String!): Boolean!
  getCurrentUser: User!
  refreshToken(refreshTokenInput: RefreshTokenInput!): TokensResult!
  removeAssignment(id: String!): Assignment!
  removeCourse(id: String!): Course!
  removeCourseParticipant(id: String!): Boolean!
  removeLocalProvider(id: String!): LocalProvider!
  removeUser(id: String!): User!
  requestPasswordReset(requestResetPasswordInput: RequestResetPasswordInput!): RequestResetPasswordResult!
  resendEmailVerification(resendEmailVerificationInput: ResendEmailVerificationInput!): ActionResult!
  resetPassword(resetPasswordInput: ResetPasswordInput!): ResetPasswordResult!
  signIn(signInInput: SignInInput!): TokensResult!
  signUp(signUpInput: SignUpInput!): ActionResult!
  updateAssignment(updateAssignmentInput: UpdateAssignmentInput!): Assignment!
  updateAvatar(updateAvatarInput: UpdateAvatarInput!): User!
  updateCourse(updateCourseInput: UpdateCourseInput!): Course!
  updateCourseParticipant(updateCourseParticipantInput: UpdateCourseParticipantInput!): CourseParticipant!
  updateLocalProvider(updateLocalProviderInput: UpdateLocalProviderInput!): LocalProvider!
  updatePost(id: String!, updatePostInput: UpdatePostInput!): Post!
  updateUser(updateUserInput: UpdateUserInput!): User!
  uploadFile(uploadFileInput: UploadFileInput!): File!
  verifyEmail(verifyEmailInput: VerifyEmailInput!): ActionResult!
}

enum OrderByDirection {
  ASC
  DESC
}

input OrderByInput {
  createdAt: OrderByDirection
  updatedAt: OrderByDirection
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  audience: audience_enum!
  author: User!
  content: String!
  course: Course!
  createdAt: DateTime!
  id: String!
  status: post_status_enum!
  updatedAt: DateTime!
}

type PostsConnection {
  edges: [PostsEdge!]!
  pageInfo: PageInfo!
}

type PostsEdge {
  cursor: String!
  node: Post!
}

type Query {
  MyCourses: [Course!]!
  assignment(id: String!): Assignment!
  assignments: [Assignment!]!
  course(id: String!): Course!
  courseParticipant(id: String!): CourseParticipant
  courseParticipants: [CourseParticipant!]!
  courses(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
    orderBy: OrderByInput
    where: CourseWhereInput
  ): CoursesConnection!
  findAllPosts(after: String, first: Float): PostsConnection!
  findPostById(id: String!): Post!
  localProvider(id: String!): LocalProvider!
  localProviders: [LocalProvider!]!
  me: User!
  user(id: String!): User!
  users: [User!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

input RequestResetPasswordInput {
  email: String!
}

type RequestResetPasswordResult {
  message: String
  success: Boolean!
}

input ResendEmailVerificationInput {
  email: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type ResetPasswordResult {
  message: String
  success: Boolean!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

type TokensResult {
  accessToken: String!
  refreshToken: String!
}

input UpdateAssignmentInput {
  attachements: [Upload!]
  courseId: String
  description: String
  dueDate: DateTime
  id: String!
  removeAttachements: [String!]
  startDate: DateTime
  title: String
}

input UpdateAvatarInput {
  avatar: Upload
}

input UpdateCourseInput {
  id: String!
  name: String
  room: String
  section: String
  subject: String
}

input UpdateCourseParticipantInput {
  id: String!
  role: CourseRole = PARTICIPANT
}

input UpdateLocalProviderInput {
  id: String!
  password: String
}

input UpdatePostInput {
  audience: audience_enum
  authorId: String
  content: String
  courseId: String
  status: post_status_enum
}

input UpdateUserInput {
  email: String
  emailVerified: Boolean
  id: String!
  name: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFileInput {
  file: Upload
}

type User {
  avatar: File
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  id: String!
  localProvider: LocalProvider
  name: String!
  posts: [Post!]
  updatedAt: DateTime!
}

input VerifyEmailInput {
  code: String!
  email: String!
}

"""Audience visibility of a post"""
enum audience_enum {
  PRIVATE
  PUBLIC
  RESTRICTED
}

"""Status of a post"""
enum post_status_enum {
  ARCHIVED
  DRAFT
  PUBLISHED
}